var documenterSearchIndex = {"docs":
[{"location":"#EquationDemoLib.jl","page":"Home","title":"EquationDemoLib.jl","text":"","category":"section"},{"location":"#Experiments","page":"Home","title":"Experiments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This library compares the compilation and evaluation speeds of two identical programs. Results are shown below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"\\# Juila program\nn:0, diff:0.0306972956\nn:1000, diff:0.0029081786\nn:2000, diff:0.0009298924\nn:3000, diff:0.0003381923\nn:4000, diff:0.0001284034\nn:5000, diff:0.0000494494\nn:6000, diff:0.0000191328\nn:7000, diff:0.0000074143\nn:8000, diff:0.0000028746\nn:9000, diff:0.0000011147\ntotal count:9117\ndiff:0.0006959054\nElapsed time: 5.566 seconds\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"\\# C program\nn:0, diff:0.0306972956\nn:1000, diff:0.0029081786\nn:2000, diff:0.0009298924\nn:3000, diff:0.0003381923\nn:4000, diff:0.0001284034\nn:5000, diff:0.0000494494\nn:6000, diff:0.0000191328\nn:7000, diff:0.0000074143\nn:8000, diff:0.0000028746\nn:9000, diff:0.0000011147\ntotal count: 9117\ndiff:0.0006959054\nElapsed time: 5.85 seconds","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"q","category":"page"},{"location":"#EquationDemoLib.q","page":"Home","title":"EquationDemoLib.q","text":"q(x::Float64, y::Float64)::Float64\n\nThis function calculates the sum of two floating-point numbers x and y.\n\nArguments\n\nx::Float64: The first number.\ny::Float64: The second number.\n\nReturns\n\nFloat64: The sum of x and y.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"u","category":"page"},{"location":"#EquationDemoLib.u","page":"Home","title":"EquationDemoLib.u","text":"u(x::Float64, y::Float64) -> Float64\n\nCalculates the analytical solution for a given experiment based on the input values x and y. \n\nThe function computes the square root of the sum of 4.0 and the product of x and y.\n\nArguments\n\nx::Float64: A floating-point number representing the first input parameter.\ny::Float64: A floating-point number representing the second input parameter.\n\nReturns\n\nFloat64: The result of the analytical calculation, which is the square root of the sum of 4.0 and x*y.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"F","category":"page"},{"location":"#EquationDemoLib.F","page":"Home","title":"EquationDemoLib.F","text":"F(x::Float64, y::Float64) -> Float64\n\nComputes the right part of the equation for the experiment. The function calculates a specific value based on the input parameters x and y, which involves an analytical expression.\n\nThe function performs the following steps:\n\nComputes the intermediate value u as the square root of 4.0 + x * y.\nUses u to compute the final result, which is the sum of two terms:\nThe first term is (fracx^2 + y^24u^3).\nThe second term is ((x + y) cdot u).\n\nArguments\n\nx::Float64: A floating-point number representing the first input parameter.\ny::Float64: A floating-point number representing the second input parameter.\n\nReturns\n\nFloat64: The computed result of the right part of the equation, which combines the contributions from x and y and the intermediate value u.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"psi","category":"page"},{"location":"#EquationDemoLib.psi","page":"Home","title":"EquationDemoLib.psi","text":"psi(x::Float64, y::Float64, A1::Float64, A2::Float64, B1::Float64, B2::Float64, h1::Float64, h2::Float64) -> Float64\n\nDefines the boundary values for a specific rectangular area. The function calculates the value at the boundary of the rectangular domain based on the input parameters. \n\nThe function handles various edge cases of the rectangle defined by corners (A1, B1), (A2, B1), (A2, B2), and (A1, B2), and computes values based on different conditions:\n\nVertical edges:\nFor (x = A2 and (B1 < y < B2, it uses the function u(x, y) to compute the boundary value.\nFor (x = A1 and (B1 < y < B2, it returns -y/4 + 2.\nHorizontal edges:\nFor y = B2 and A1 < x < A2, it uses the function u(x, y) to compute the boundary value.\nFor y = B1 and A1 < x < A2, it returns -x/4 + 2.\nCorners:\nFor (x, y) = (A1, B1), it returns a weighted average of boundary values at (A1, B1).\nFor (x, y) = (A1, B2), it returns a weighted average of boundary values at (A1, B2).\nFor (x, y) = (A2, B1), it returns a weighted average of boundary values at (A2, B1).\nFor (x, y) = (A2, B2), it returns a weighted average of boundary values at (A2, B2).\n\nArguments\n\nx::Float64: The x-coordinate of the point.\ny::Float64: The y-coordinate of the point.\nA1::Float64: The x-coordinate of the left boundary of the rectangle.\nA2::Float64: The x-coordinate of the right boundary of the rectangle.\nB1::Float64: The y-coordinate of the bottom boundary of the rectangle.\nB2::Float64: The y-coordinate of the top boundary of the rectangle.\nh1::Float64: A weighting factor for the boundary values.\nh2::Float64: A weighting factor for the boundary values.\n\nReturns\n\nFloat64: The computed boundary value at the point (x, y).\n\nThrows\n\nThrows an ErrorException if the point (x, y) is not on the boundary of the rectangle defined by [A1, A2] \times [B1, B2].\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"apply_A","category":"page"},{"location":"#EquationDemoLib.apply_A","page":"Home","title":"EquationDemoLib.apply_A","text":"apply_A(matrix_apply_to::Matrix{Float64}, A1::Float64, A2::Float64, B1::Float64, B2::Float64, h1::Float64, h2::Float64) -> Matrix{Float64}\n\nApplies a specific operator A to a given matrix. The operator is defined for the boundary conditions of a rectangular domain. This function returns a new matrix that is the result of applying the operator A to the input matrix matrix_apply_to, based on the specified boundaries and weighting factors.\n\nThe function iterates over each element of the input matrix and applies the operator A based on the position of the element relative to the boundaries of the rectangular domain.\n\nArguments\n\nmatrix_apply_to::Matrix{Float64}: The matrix to which the operator A will be applied. The function returns a new matrix with the results.\nA1::Float64: The x-coordinate of the left boundary of the rectangular domain.\nA2::Float64: The x-coordinate of the right boundary of the rectangular domain.\nB1::Float64: The y-coordinate of the bottom boundary of the rectangular domain.\nB2::Float64: The y-coordinate of the top boundary of the rectangular domain.\nh1::Float64: A weighting factor used in the operator A.\nh2::Float64: Another weighting factor used in the operator A.\n\nReturns\n\nMatrix{Float64}: A new matrix with the operator A applied, based on the boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"get_B","category":"page"},{"location":"#EquationDemoLib.get_B","page":"Home","title":"EquationDemoLib.get_B","text":"get_B(M::Int, N::Int, h1::Float64, h2::Float64, A1::Float64, A2::Float64, B1::Float64, B2::Float64) -> Matrix{Float64}\n\nGenerates a matrix B based on the boundary conditions of a rectangular domain. The matrix B is computed by applying either the psi function (for boundary edges) or the F function (for interior points) based on the location of each matrix element relative to the defined boundaries.\n\nThe function initializes a matrix of size M by N, where each element is computed as follows:\n\nEdges: For elements on the boundary of the rectangular domain, the function uses the psi function to determine the value.\nInterior: For elements inside the boundary, the function uses the F function.\n\nArguments\n\nM::Int: Number of rows in the resulting matrix.\nN::Int: Number of columns in the resulting matrix.\nh1::Float64: Weighting factor for the boundary conditions.\nh2::Float64: Another weighting factor for the boundary conditions.\nA1::Float64: The x-coordinate of the left boundary of the rectangular domain.\nA2::Float64: The x-coordinate of the right boundary of the rectangular domain.\nB1::Float64: The y-coordinate of the bottom boundary of the rectangular domain.\nB2::Float64: The y-coordinate of the top boundary of the rectangular domain.\n\nReturns\n\nMatrix{Float64}: A matrix of size M by N with values computed using the psi or F functions based on boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"scalar_product","category":"page"},{"location":"#EquationDemoLib.scalar_product","page":"Home","title":"EquationDemoLib.scalar_product","text":"scalar_product(A::Matrix{Float64}, B::Matrix{Float64}, h1::Float64, h2::Float64) -> Float64\n\nComputes the scalar product of two matrices A and B by performing element-wise multiplication and then summing the results. The function uses weighting factors h1 and h2 to adjust the product based on the index of each element.\n\nThe scalar product is computed as follows:\n\nFor each element (i, j) in the matrices A and B, compute the product A[i, j] * B[i, j].\nApply a weight based on the indices (i, j) using the parameters h1 and h2.\nSum all the weighted products to obtain the final scalar result.\n\nArguments\n\nA::Matrix{Float64}: The first matrix for the scalar product calculation.\nB::Matrix{Float64}: The second matrix for the scalar product calculation.\nh1::Float64: A weighting factor used in the computation.\nh2::Float64: Another weighting factor used in the computation.\n\nReturns\n\nFloat64: The scalar result of the element-wise product of A and B, weighted by h1 and h2, and summed.  scalar_product(A::Matrix{Float64}, B::Matrix{Float64}, h1::Float64, h2::Float64) -> Float64\n\nComputes the scalar product of two matrices A and B by performing element-wise multiplication and then summing the results. The function uses weighting factors h1 and h2 to adjust the product based on the index of each element.\n\nThe scalar product is computed as follows:\n\nFor each element (i, j) in the matrices A and B, compute the product A[i, j] * B[i, j].\nApply a weight based on the indices (i, j) using the parameters h1 and h2.\nSum all the weighted products to obtain the final scalar result.\n\nArguments\n\nA::Matrix{Float64}: The first matrix for the scalar product calculation.\nB::Matrix{Float64}: The second matrix for the scalar product calculation.\nh1::Float64: A weighting factor used in the computation.\nh2::Float64: Another weighting factor used in the computation.\n\nReturns\n\nFloat64: The scalar result of the element-wise product of A and B, weighted by h1 and h2, and summed.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"proximity_search","category":"page"},{"location":"#EquationDemoLib.proximity_search","page":"Home","title":"EquationDemoLib.proximity_search","text":"proximity_search(M::Int, N::Int)\n\nPerforms an iterative search to solve a given problem using an iterative method to update the solution based on residuals. This function iteratively refines the approximation omega to minimize the residual between A * omega and B until the change between successive iterations is below a specified tolerance.\n\nThe function performs the following steps:\n\nInitializes the parameters, matrices, and iteration variables.\nComputes the initial matrix B using boundary conditions.\nIteratively updates the solution omega using the following formula: omega_ij^(k+1) = omega_ij^(k) - tau_k+1 r_ij^(k) where the residual r^(k) is calculated as r^(k) = A omega^(k) - B and the iteration parameter tau_k+1 is computed as: tau_k+1 = fracA r^(k) r^(k)A r^(k)_E^2\nStops the iteration when the change between successive iterations is less than the specified tolerance varepsilon.\nOutputs the number of iterations and the maximum difference between the computed solution and the analytical solution.\n\nArguments\n\nM::Int: Number of rows in the matrix for the problem.\nN::Int: Number of columns in the matrix for the problem.\n\nReturns\n\nNone: The function prints the iteration results and maximum difference to the console.\n\n\n\n\n\n","category":"function"}]
}
